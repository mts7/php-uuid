version: 2.1

executors:
  php-82:
    docker:
      - image: cimg/php:8.2
    resource_class: large
  python-3:
    docker:
      - image: python:latest
    resource_class: large

orbs:
  php: circleci/php@1.1.0

commands:
  checkout_code:
    steps:
      - restore_cache:
          name: Restoring source code cache
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - run:
          name: git Garbage Collection
          command: git gc
      - save_cache:
          name: Saving source code cache
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
  enable_extensions:
    steps:
      - run:
          name: Making a pecl-cache directory
          command: mkdir pecl-cache
      - restore_cache:
          name: Restoring PECL cache
          keys:
            - pecl-v2-{{ checksum "composer.json" }}
      - run:
          name: Copying restored pecl extensions cache into extensions directory
          command: sudo cp -R pecl-cache/. $(pecl config-show | grep ext_dir | awk -F ' ' '{print $(NF)}')
      - run:
          name: Install pecl extensions
          command: |
            pecl_dir=$(pecl config-show | grep ext_dir | awk -F ' ' '{print $(NF)}')
            ini_dir=$(php --ini | grep "Scan for additional" | awk -F ': ' '{print $2}')

            if [ ! -f "$pecl_dir/pcov.so" ]; then
                sudo pecl install pcov
            fi
            echo "extension=pcov.so" | sudo tee "$ini_dir/pcov.ini"

            if [ ! -f "$pecl_dir/apcu.so" ]; then
                echo yes | sudo pecl install apcu
            fi
            echo "extension=apcu.so" | sudo tee "$ini_dir/apcu.ini"
      - run:
          name: Copying pecl extensions to temp directory which will be cached
          command: sudo cp -R $(pecl config-show | grep ext_dir | awk -F ' ' '{print $(NF)}')/* pecl-cache/
      - save_cache:
          name: Saving PECL cache
          key: pecl-v2-{{ checksum "composer.json" }}
          paths:
            - pecl-cache
  create_reports_directory:
    steps:
      - run:
          name: Create reports directory
          command: mkdir ~/reports
  install_composer:
    steps:
      - php/install-composer
  install_composer_packages:
    steps:
      - restore_cache:
          name: Restore Composer Package Cache
          keys:
            - composer-v2-{{ checksum "composer.json" }}
      - php/install-packages:
          install-flags: --no-interaction --prefer-dist --optimize-autoloader --apcu-autoloader
          with-cache: false
      - save_cache:
          name: Save Composer Package Cache
          key: composer-v2-{{ checksum "composer.json" }}
          paths:
            - ~/project/vendor
            - ~/project/composer.lock
            - ~/.composer/cache
  init_jobs:
    steps:
      - checkout_code
      - install_composer
      - install_composer_packages
  composer_package_security:
    steps:
      - run:
          name: Check for Vulnerable Composer Packages
          command: composer update --dry-run roave/security-advisories
  check_composer_unused:
    steps:
      - run:
          name: Check for unused Composer dependencies
          command: vendor/bin/composer-unused

jobs:
  job-init:
    executor: php-82
    steps:
      - init_jobs
      - composer_package_security
      - check_composer_unused
      - enable_extensions
  test:
    executor: php-82
    steps:
      - init_jobs
      - enable_extensions
      - run:
          name: Unit Tests
          command: php -d pcov.enabled=1 vendor/bin/phpunit --coverage-html ~/reports/code-coverage --coverage-xml reports/coverage-xml --log-junit ~/reports/junit.xml
      - store_artifacts:
          path: ~/reports/code-coverage
          destination: code-coverage
      - store_artifacts:
          path: reports/coverage-xml
          destination: coverage-xml
      - store_artifacts:
          path: ~/reports/junit.xml
          destination: junit.xml
      - store_test_results:
          path: ~/reports/junit.xml
      - run:
          name: Mutation Tests
          command: |
            mv ~/reports/junit.xml reports/coverage-xml/junit.xml
            php -d memory_limit=-1 vendor/bin/infection --threads=4 --min-msi=100 --min-covered-msi=100 --coverage=reports/coverage-xml --skip-initial-tests
      - store_artifacts:
          path: reports/infection.html
          destination: infection.html
  psalm:
    executor: php-82
    steps:
      - init_jobs
      - create_reports_directory
      - run:
          name: Install xsltproc for HTML reporting
          command: |
            sudo apt update
            sudo apt install xsltproc
      - run:
          name: Psalm
          command: vendor/bin/psalm --output-format=xml | xsltproc vendor/roave/psalm-html-output/psalm-html-output.xsl - > ~/reports/psalm.html
      - store_artifacts:
          path: ~/reports/psalm.html
          destination: psalm.html
  static_analysis:
    executor: php-82
    steps:
      - init_jobs
      - run:
          name: Lint
          command: vendor/bin/parallel-lint --exclude .git --exclude vendor --colors .
      - run:
          name: Code Standards
          command: vendor/bin/phpcs -n
      - run:
          name: PHP Mess Detector
          command: vendor/bin/phpmd src,tests html phpmd.xml.dist --reportfile ~/reports/phpmd.html
      - store_artifacts:
          path: ~/reports/phpmd.html
          destination: phpmd.html
      - run:
          name: PHPStan
          command: vendor/bin/phpstan analyze --memory-limit=-1 --error-format=prettyJson | tee ~/reports/phpstan.json
      - store_artifacts:
          path: ~/reports/phpstan.json
          destination: phpstan.json
      - run:
          name: Psalm Security Analysis
          command: vendor/bin/psalm --taint-analysis --report=reports/psalm-security.sarif
      - store_artifacts:
          path: reports/psalm-security.sarif
          destination: psalm-security.sarif
  yaml:
    executor: python-3
    steps:
      - checkout_code
      - run:
          name: Install YAML Lint
          command: pip install yamllint
      - run:
          name: YAML Lint
          command: yamllint .

workflows:
  build:
    jobs:
      - yaml
      - job-init:
          requires:
            - yaml
      - test:
          requires:
            - job-init
      - static_analysis:
          requires:
            - job-init
      - psalm:
          requires:
            - job-init
